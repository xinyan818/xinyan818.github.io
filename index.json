[{"content":"记录跨域问题的原因，并展示如何使用 Nginx 的配置来解决这些问题\n什么是跨源资源共享（CORS）？ 跨源资源共享（CORS）是一种浏览器安全策略，用于限制来自不同域的 Web 应用程序对当前域中资源的访问。想要深入了解 CORS，请查阅MDN Web 文档。\n跨域问题与 Nginx 配置 当前端直接请求服务端接口时，经常会遇到跨域问题，你可能会在浏览器的控制台看到如下错误：\nAccess to XMLHttpRequest at \u0026lsquo;https://test.xxx.com\u0026rsquo; from origin \u0026lsquo;http://localhost:8080\u0026rsquo; has been blocked by CORS policy: Response to preflight request doesn\u0026rsquo;t pass access control check: No \u0026lsquo;Access-Control-Allow-Origin\u0026rsquo; header is present on the requested resource.\n在使用 Nginx 作为反向代理时，我们一般可以通过以下配置解决大多数跨域问题：\nlocation / { ... add_header Access-Control-Allow-Origin \u0026#34;https://localhost:8080\u0026#34;; add_header Access-Control-Allow-Credentials true; add_header Access-Control-Expose-Headers FooBar; ... } 然而，有一些特殊情况需要额外注意，我们将逐一列举并给出相应的优化配置。\n其他情况 情况一，Nginx反向代理服务端，服务端也进行了跨域设置 此时可能会出现以下错误:\nAccess to XMLHttpRequest at \u0026lsquo;https://test.xxx.com/api/xxx' from origin \u0026lsquo;http://localhost:8080\u0026rsquo; has been blocked by CORS policy: Response to preflight request doesn\u0026rsquo;t pass access control check: The \u0026lsquo;Access-Control-Allow-Origin\u0026rsquo; header contains multiple values \u0026lsquo;http://localhost:8080, *\u0026rsquo;, but only one is allowed.\n可以考虑移除服务端的跨域设置\n或在Nginx中对Access-Control-Allow-Origin进行修改而不是添加，即：\n使用proxy_set_header而不是add_header\nlocation / { ... proxy_set_header Access-Control-Allow-Origin *; ... } 情况二，服务端（或框架）对于预检请求没有特殊处理 预检请求（Preflight Request）是 CORS 中的一种特殊请求，关于预检请求的详细信息请参考这里。\n在这种情况下，客户端对服务端发起 OPTIONS 请求时可能出现 404 错误，或者收到其他正常响应但没有任何 CORS 相关的头信息字段。这时，浏览器会认定服务器不同意预检请求，从而导致跨域问题。\n解决方案是在 Nginx 中添加如下配置：\nlocation / { ... if ($request_method = \u0026#39;OPTIONS\u0026#39;) { return 204; } ... } 情况三，需要使用Cookie，但配置了Access-Control-Allow-Origin: * 一般这种情况需要使用 cookie，所以配置了Access-Control-Allow-Credentials: true，或客户端使用了withCredentials = true\nAccess-Control-Allow-Credentials：该字段是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。\n会出现如下报错:\nAccess to XMLHttpRequest at \u0026lsquo;https://test.xxx.com/api/xxx' from origin \u0026lsquo;http://localhost:8080\u0026rsquo; has been blocked by CORS policy: Response to preflight request doesn\u0026rsquo;t pass access control check: The value of the \u0026lsquo;Access-Control-Allow-Origin\u0026rsquo; header in the response must not be the wildcard \u0026lsquo;*\u0026rsquo; when the request\u0026rsquo;s credentials mode is \u0026lsquo;include\u0026rsquo;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.\n为了解决这个问题，我们不能使用 *，而必须指定具体的 Origin。\n如果你有确定的域名，可以直接将其写入配置中：\nlocation / { ... add_header Access-Control-Allow-Origin http://xxx.com; ... } 如果你需要根据相关规则动态设置 Origin：\nlocation / { ... if ($http_origin ~* \u0026#34;xxx.com\u0026#34;) { add_header Access-Control-Allow-Origin $http_origin; } ... } 情况四，配置顺序不对 在代理的资源后面加跨域参数无效\nlocation / { proxy_pass http://test.xxx.com/api # ❌写在这里不会生效 ... add_header Access-Control-Allow-Origin $http_origin; ... proxy_pass http://test.xxx.com/api # ✅要写在参数配置下方 } 参考链接 跨域资源共享 CORS 详解 https://www.ruanyifeng.com/blog/2016/04/cors.html\nNginx 轻松搞定跨域问题！https://www.cnblogs.com/konglxblog/p/16114550.html\n","permalink":"https://xinyan818.github.io/post/cors_problems/","summary":"\u003cp\u003e记录跨域问题的原因，并展示如何使用 Nginx 的配置来解决这些问题\u003c/p\u003e\n\u003cp\u003e什么是跨源资源共享（CORS）？\n跨源资源共享（CORS）是一种浏览器安全策略，用于限制来自不同域的 Web 应用程序对当前域中资源的访问。想要深入了解 CORS，请查阅\u003ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\"\u003eMDN Web 文档\u003c/a\u003e。\u003c/p\u003e","title":"跨域问题记录"},{"content":"数学定义 众所周知，三点确定一个圆，通过在圆上的任意三点可以解出圆的方程，当我们解出方程，一般会得到数学中常见的一般式方程：\n$$x^2+y^2+Dx+Ey+F=r^2$$\n本质上我们也得到了圆心和半径（可能并不那么容易）\n已知圆心 (x0, y0) 和半径 r，可以得到圆的标准方程：\n$${(x-x0)}^2+{(y-y0)}^2=r^2$$\n制作圆的动画的关键就需要得到圆心和半径, 可以想象下圆规画圆\n圆周动画 做动画和数学中解方程不完全相同，动画还有一个进度的概念，进度大部分时候可以理解为时间，不同时间中的状态组成了动画\n使物体做圆周运动，需要得到物体在圆周上不同时间的坐标\n假设物体的起始坐标为 (r, 0)，初始角度为 0，在单位时间内移动的角度为 θ\n那么在下一个单位时间的坐标为 (r*cosθ, r*sinθ)，随着时间角度不断增加，就可以得到一个圆的动画\n这里演示用，我们使 θ = π/6（弧度制），即30度\n不断点击下方canvas画布可以得到这个过程\n弧度制和角度制 角度是客观存在的, 具体数值则是一个度量标准。数学中三角函数使用的是弧度制，编程语言中也使用弧度制。\n角度制是把周角映射到360°，弧度制是把周角映射到2π，可以得到 $$2πrad=360° $$ $$πrad=180° $$ $$rad=\\frac{180°}{π}$$\n例：js将角度转为弧度\nconst angle = 30 const rad = 30 * Math.PI / 180 Math.sin(rad) // 0.49999999999999994 ","permalink":"https://xinyan818.github.io/post/circle_animation/","summary":"\u003ch3 id=\"数学定义\"\u003e数学定义\u003c/h3\u003e\n\u003cp\u003e众所周知，\u003cstrong\u003e三点确定一个圆\u003c/strong\u003e，通过在圆上的任意三点可以解出圆的方程，当我们解出方程，一般会得到数学中常见的一般式方程：\u003c/p\u003e\n\u003cp\u003e$$x^2+y^2+Dx+Ey+F=r^2$$\u003c/p\u003e\n\u003cp\u003e本质上我们也得到了圆心和半径（可能并不那么容易）\u003c/p\u003e","title":"圆周运动动画"},{"content":"Hugo是一个用Go语言编写的静态网站生成器，想了解Hugo可以前往官网。\n这次使用Hugo来写博客，并发布到github pages，之前就用Jekyll搞过一次（没写起来）。\n为什么要用Hugo?\n放在今天已经不算新鲜，但对我来说，主要就是图一新鲜（我没整过），其实Jekyll用起来也很简单，网上的教程几乎都是手把手教学。有个趁手的工具持续输出内容才是关键。\n安装Hugo 官网有介绍，我这次选择源码安装(MacOS)\nmkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install go build -o hugo main.go 执行以上命令后在$HOME/src中会有一个hugo的可执行文件，添加到环境变量，(我的shell是zsh)在 ~/.zshrc中添加以下内容后执行source ~/.zshrc\nexport HUGO_HOME=\u0026#34;$HOME/src/hugo\u0026#34; export PATH=\u0026#34;$HUGO_HOME:$PATH\u0026#34; 在命令行中输入hugo version验证是否安装成功\n使用 创建项目\nhugo new site my-site-name 创建后的hugo项目是没有主题的，但是需要主题才能使用\n到这个网站查看主题，选择一个中意的进行下载，我这里选择了一个简单的主题Blonde\ncd my-site-name git init git submodule add https://github.com/opera7133/Blonde.git themes/Blonde 按照主题页面的指引安装，配置文件主题已经提供了示例，直接copy到项目根目录，不同的主题安装略有差异，具体请查看页面上的介绍\n启动Hugo服务\nhugo server --buildDrafts --watch \u0026ndash;buildDrafts或者-D，可以查看草稿内容\n-–watch或者-w 选项打开的话，将会监控到内容的改动从而自动去刷新浏览器\n服务起来后，进入http://localhost:1313查看\n页面是空的，因为还没有内容\n添加内容\nhugo new posts/test.md 打开文件顶部是以下内容\n--- title: \u0026#34;test\u0026#34; date: 2022-09-20T12:18:38+08:00 draft: true --- 注意发布的时候要把draft设为false，即标记为不是草稿\n发布到Github Pages上 我创建了两个仓库，一个放hugo项目，用来写博客，可能会有不完整的草稿，就设置为了私有。另一个用来部署github pages\n在hugo项目中打包，将生成的pullic项目推送到github pages项目，操作如下:\nhugo cd public git init git remote add origin git@github.com:xinyan818/xinyan818.github.io.git git add -A git commit -m \u0026#39;public\u0026#39; git push --set-upstream origin master 非首次执行，git init会提示已存在仓库，忽略就可以\n","permalink":"https://xinyan818.github.io/post/blog_with_hugo/","summary":"\u003cp\u003eHugo是一个用Go语言编写的静态网站生成器，想了解\u003ccode\u003eHugo\u003c/code\u003e可以\u003ca href=\"https://gohugo.io/\"\u003e前往官网\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e这次使用Hugo来写博客，并发布到github pages，之前就用\u003ccode\u003eJekyll\u003c/code\u003e搞过一次（没写起来）。\u003c/p\u003e","title":"使用Hugo建立博客"},{"content":"","permalink":"https://xinyan818.github.io/contact/","summary":"","title":"Contact"},{"content":"一个普通人\n","permalink":"https://xinyan818.github.io/about/","summary":"\u003cp\u003e一个普通人\u003c/p\u003e","title":"About"}]